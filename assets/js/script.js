// ? Grab references to the important DOM elements.
const taskFormEl = $('#task-form');
const taskTitleInputEl = $('#task-title-input');
const taskDueDateInputEl = $('#task-due-date-input');
const taskDescInputEl = $('#task-desc');


// Reads task from local storage and returns array of task objects.
// If there are no tasks in localStorage, it initializes an empty array ([]) and returns it.
function readTasksFromStorage() {

    let taskList = JSON.parse(localStorage.getItem("tasks"));
    let nextId = JSON.parse(localStorage.getItem("nextId"));

    if (!taskList) {
        taskList = [];
    }

    return taskList;
}

//  Accepts an array of tasks, stringifys them, and saves them in localStorage.
function saveTasksToStorage(taskList) {
    localStorage.setItem('tasks', JSON.stringify(taskList));
}


// Function to return unique identity generated by calling Web API `crypto` to identify the task in the array
function generateTaskId() {
    return crypto.randomUUID()
}

// Todo: create a function to create a task card
function createTaskCard(task) {

}

// Todo: create a function to render the task list and make cards draggable
function renderTaskList() {

}

// Todo: create a function to handle adding a new task
function handleAddTask(event) {

    console.log("HI I AM IN HANDLEADDTASK");

    console.log(taskFormEl);

    event.preventDefault();
    //Read user input from the form
    const taskTitle = taskTitleInputEl.val().trim();
    const taskDueDate = taskDueDateInputEl.val();
    const taskDescription = taskDescInputEl.val().trim();

if( taskTitle != ""  &&  taskDueDate != "" ){

    const taskDetail = {
        taskid: generateTaskId(),
        tasktitle: taskTitle,
        taskduedate: taskDueDate,
        taskdesc: taskDescription,
        status: 'to-do',
    };

    const allTasks = readTasksFromStorage();
    allTasks.push(taskDetail);

    saveTasksToStorage(allTasks);

    // Clear the form inputs
    taskTitleInputEl.val('');
    taskDueDateInputEl.val('');
    taskDescInputEl.val('');


    taskFormEl.removeClass('was-validated');
    $('#formModal').modal('hide'); // Hide the modal  
    
}else{

    event.stopPropagation();

    console.log(taskFormEl);
    taskFormEl.addClass('was-validated');   

   

   
}


}

// Todo: create a function to handle deleting a task
function handleDeleteTask(event) {

}

// Todo: create a function to handle dropping a task into a new status lane
function handleDrop(event, ui) {

}

// Todo: when the page loads, render the task list, add event listeners, make lanes droppable, and make the due date field a date picker
$(document).ready(function () {
    //datepicker initialization
    $('#task-due-date-input').datepicker({
        changeMonth: true,
        changeYear: true,
    });
});

// Add event listener to the form element, listen for a submit event, and call the `handleAddTask` function
taskFormEl.on('submit', handleAddTask);
